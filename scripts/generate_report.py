#!/usr/bin/env python3
"""
Generate Report Script - Third task in the data processing pipeline
Generates an HTML report from processed data
"""

import json
import sys
import os
from datetime import datetime

def generate_report(input_file, output_file):
    """Generate HTML report from processed data"""
    print(f"Generating report from: {input_file}")
    
    # Load the processed data
    with open(input_file, 'r') as f:
        data = json.load(f)
    
    # Generate HTML report
    html_content = f"""
<!DOCTYPE html>
<html>
<head>
    <title>Data Processing Report</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; }}
        .header {{ background-color: #f0f0f0; padding: 20px; border-radius: 5px; }}
        .summary {{ background-color: #e8f4f8; padding: 15px; margin: 20px 0; border-radius: 5px; }}
        .data-table {{ width: 100%; border-collapse: collapse; margin: 20px 0; }}
        .data-table th, .data-table td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
        .data-table th {{ background-color: #f2f2f2; }}
        .footer {{ margin-top: 40px; font-size: 12px; color: #666; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>Data Processing Report</h1>
        <p>Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
    </div>
    
    <div class="summary">
        <h2>Processing Summary</h2>
        <ul>
            <li><strong>Original Records:</strong> {data['original_records_count']}</li>
            <li><strong>Processed Records:</strong> {data['processed_records_count']}</li>
            <li><strong>Processing Time:</strong> {data['metadata']['processing_time_ms']} ms</li>
            <li><strong>Memory Used:</strong> {data['metadata']['memory_used_mb']} MB</li>
            <li><strong>Transformations Applied:</strong> {', '.join(data['transformations'])}</li>
        </ul>
    </div>
    
    <h2>Sample Data</h2>
    <table class="data-table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Processed Value</th>
                <th>Processed Timestamp</th>
                <th>Transformation</th>
            </tr>
        </thead>
        <tbody>
"""
    
    # Add sample records to table (first 10)
    for record in data['data'][:10]:
        html_content += f"""
            <tr>
                <td>{record['id']}</td>
                <td>{record['processed_value']}</td>
                <td>{record['processed_timestamp']}</td>
                <td>{record['transformation_applied']}</td>
            </tr>
"""
    
    html_content += """
        </tbody>
    </table>
    
    <div class="footer">
        <p>Report generated by Data Processing Pipeline</p>
        <p>Source file: """ + data['source_file'] + """</p>
    </div>
</body>
</html>
"""
    
    # Save HTML report
    os.makedirs(os.path.dirname(output_file), exist_ok=True)
    with open(output_file, 'w') as f:
        f.write(html_content)
    
    print(f"Report generated successfully")
    print(f"Output saved to: {output_file}")
    
    return {
        "status": "success",
        "report_file": output_file,
        "records_in_report": min(10, len(data['data'])),
        "total_records": len(data['data']),
        "report_size_kb": round(os.path.getsize(output_file) / 1024, 2)
    }

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python generate_report.py <input_file> <output_file>")
        sys.exit(1)
    
    input_file = sys.argv[1]
    output_file = sys.argv[2]
    
    try:
        result = generate_report(input_file, output_file)
        print(f"GENERATE_RESULT: {json.dumps(result)}")
        sys.exit(0)
    except Exception as e:
        print(f"Error generating report: {str(e)}")
        sys.exit(1)
